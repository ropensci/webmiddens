% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/midden.R
\docType{data}
\name{midden}
\alias{midden}
\title{web middens}
\description{
web middens
}
\details{
\strong{Methods}
\describe{
\item{\code{init(path)}}{
a directory path
}
\item{\code{call(..., expire = NULL)}}{
an http request code block
- ...: a http request block
- expire: (integer) number of seconds until expiry. after this time,
we force a real HTTP reqeuest even if a matching stub exists.
times are recorded in UTC.
}
}
}
\examples{
\dontrun{
library(crul)

# without middens
con <- crul::HttpClient$new("https://httpbin.org")
con$get(query = list(stuff = "bananas"))

# with middens
x <- midden$new()
x
x$init(path = "rainforest")
x
# first request is a real HTTP request
x$call(con$get("get", query = list(stuff = "bananas")))
# following requests use the cached response
x$call(con$get("get", query = list(stuff = "bananas")))

# verbose output
x <- midden$new(verbose = TRUE)
x$init(path = "rainforest")
x$call(con$get("get", query = list(stuff = "bananas")))

# set expiration time
x <- midden$new()
x$init(path = "grass")
# set expiry
x$call(con$get("get", query = list(grass = "tall")), expire = 10)
## before expiry, get mocked response
x$call(con$get("get", query = list(grass = "tall")), expire = 10)
Sys.sleep(10)
## after expiry, get real response
x$call(con$get("get", query = list(grass = "tall")), expire = 10)
}
}
\keyword{datasets}
