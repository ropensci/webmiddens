% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/midden.R
\name{midden}
\alias{midden}
\title{midden}
\description{
web middens class
}
\examples{
\dontrun{
library(crul)

# without middens
con <- crul::HttpClient$new("https://httpbin.org")
con2 <- crul::HttpClient$new("https://google.com")
con$get("get", query = list(stuff = "bananas"))
con2$get(query = list(q = "stuff"))

# with middens
x <- midden$new()
x
x$init(path = "rainforest3")
x
x$cache
x$expire()
x$expire(5)
x$expire()
x$expire(reset = TRUE)
x$expire()
Sys.setenv(WEBMIDDENS_EXPIRY_SEC = 35)
x$expire()
x$expire(reset = TRUE)
x$expire()
# first request is a real HTTP request
x$r(con$get("get", query = list(stuff = "bananas")))
# following requests use the cached response
x$r(con$get("get", query = list(stuff = "bananas")))

# verbose output
x <- midden$new(verbose = TRUE)
x$init(path = "rainforest")
x$r(con$get("get", query = list(stuff = "bananas")))

# set expiration time
x <- midden$new()
x$init(path = "grass")
x
# set expiry
x$r(con$get("get", query = list(grass = "tall")), expire = 3)
## before expiry, get mocked response
x$r(con$get("get", query = list(grass = "tall")), expire = 3)
Sys.sleep(5)
## after expiry, get real response
x$r(con$get("get", query = list(grass = "tall")), expire = 3)
}

## ------------------------------------------------
## Method `midden$expire`
## ------------------------------------------------

z <- midden$new()
z$expire(35) # set to expire all requests in 35 seconds
# or set by env var
Sys.setenv(WEBMIDDENS_EXPIRY_SEC = 35)
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{cache}}{\itemize{
\item an \code{HoardClient} class, see \code{\link[hoardr:hoard]{hoardr::hoard()}} for help
}}

\item{\code{cache_path}}{(character) the cache path}

\item{\code{verbose}}{(logical) verbose or not}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{midden$new()}}
\item \href{#method-print}{\code{midden$print()}}
\item \href{#method-r}{\code{midden$r()}}
\item \href{#method-init}{\code{midden$init()}}
\item \href{#method-destroy}{\code{midden$destroy()}}
\item \href{#method-expire}{\code{midden$expire()}}
\item \href{#method-clone}{\code{midden$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Create a new \code{midden} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{midden$new(verbose = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{(logical) get messages about whats going on.
default: \code{FALSE}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{midden} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\subsection{Method \code{print()}}{
print method for \code{midden} objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{midden$print(x, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{self}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-r"></a>}}
\subsection{Method \code{r()}}{
an http request code block
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{midden$r(..., expire = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{an http request block}

\item{\code{expire}}{(integer) number of seconds until expiry. after this time,
we force a real HTTP reqeuest even if a matching stub exists.
times are recorded in UTC.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
http response
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-init"></a>}}
\subsection{Method \code{init()}}{
initialize the class with a path for where to cache data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{midden$init(
  path = NULL,
  type = "user_cache_dir",
  prefix = "R",
  full_path = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{(character) the path to be appended to the cache path set
by \code{type}}

\item{\code{type}}{(character) the type of cache, see \pkg{rappdirs}}

\item{\code{prefix}}{(character) prefix to the \code{path} value. Default: "R"}

\item{\code{full_path}}{(character) instead of using \code{path}, \code{type}, and \code{prefix}
just set the full path with this parameter}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-destroy"></a>}}
\subsection{Method \code{destroy()}}{
remove all cached files in the midden
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{midden$destroy()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-expire"></a>}}
\subsection{Method \code{expire()}}{
set an expiration time
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{midden$expire(expire = NULL, reset = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{expire}}{(integer) seconds to expire - OR, set via the
environment variable \code{WEBMIDDENS_EXPIRY_SEC}}

\item{\code{reset}}{(logical) reset to \code{NULL}? default: \code{FALSE}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{z <- midden$new()
z$expire(35) # set to expire all requests in 35 seconds
# or set by env var
Sys.setenv(WEBMIDDENS_EXPIRY_SEC = 35)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{midden$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
